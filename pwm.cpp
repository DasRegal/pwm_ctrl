//*****************************************************************************
//
// Имя файла    : 'pwm.cpp'
// Заголовок    : Драйвер для работы с ШИМ
// Автор        : Барышников Р. А.
// Контакты     : plexus_bra@rambler.ru
// Дата         : 23.04.2013
//
//*****************************************************************************

#include "pwm.h"
#include "gpio.h"
#include <pthread.h>
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <curses.h>

//	int g_Prc;

	// Период в мкс.
	#define PWM_T	20000


 void * ThreadPWM(void *arg)
{
	int prc;
	int chan;
//	int chan = * (int *) arg;
//	int prc = g_Prc;
	int t;
	while (1)
	{
		prc = reinterpret_cast<CPWMCtrl*>(arg)->m_Prc;
		chan = reinterpret_cast<CPWMCtrl*>(arg)->m_Chan;
		t = prc * 10 + 1000 - 500;
		GPIOSet(chan);
		usleep(t);
		GPIOClr(chan);
		usleep(PWM_T - t);
	}
}

// =============================================================================
//                                 Класс CPWMCtrl
// =============================================================================

// =============================================================================
///
///                                Конструктор
///
// =============================================================================

CPWMCtrl::CPWMCtrl()
{

}

// =============================================================================
///
///                            Настройка порта
///
// =============================================================================
/// \param  portName  Имя устройства
// =============================================================================

int CPWMCtrl::Create(int chan)
{
	int result;
	//pthread_t thread;

	GPIOInit(chan);
	
	m_Chan = chan;
	result = pthread_create(&this->m_Thread, NULL, ThreadPWM, this);
	if (result != 0)
	{
		perror("Creating the first thread");
		return EXIT_FAILURE;
	}
}

// =============================================================================
///
///                        Чтение значения сонара
///
// =============================================================================
/// \return Значение в мм.
// =============================================================================
/// На com-порт приходит строчка вида "Rxxxx", где xxxx - расстояние в мм.
// =============================================================================

void CPWMCtrl::Setdt(int prc)
{
	m_Prc = prc;
}
