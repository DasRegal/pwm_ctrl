//*****************************************************************************
//
// Имя файла    : 'msp_pwm.cpp'
// Заголовок    : Драйвер
// Автор        : Барышников Р. А.
// Контакты     : plexus_bra@rambler.ru
// Дата         : 26.06.2013
//
//*****************************************************************************

#include "msp_pwm.h"
#include "main.h"
#include "spi.h"
#include <stdio.h>

// =============================================================================
//                                 Отладка
// =============================================================================

// =============================================================================
//                                Костанты
// =============================================================================

// =============================================================================
//                                 Макросы
// =============================================================================

// =============================================================================
//                           Глобальные переменные
// =============================================================================
	
	CSPI spi;
	static int g_CS_PWM;

// =============================================================================
//                             Прототипы функций
// =============================================================================

void InitSPI2PWM(int miso, int mosi, int clk)
{
	spi.Init(miso, mosi, clk);
}

void InitPWM(void)
{
	g_CS_PWM = spi.InitCS(CS1);
	printf("CS PWM %d\n", g_CS_PWM);
}

void SetSPI2PWM(int* bufChan, char channels)
{
	spi.WriteByte(0xFF);
	spi.WriteByte(0xFF);
	
	for (int i = 0; i < channels; i++, bufChan++)
	{
		spi.WriteByte(*bufChan >> 8);
		spi.WriteByte(*bufChan & 0xFF);
	}
}

void SetSPI (int value, int chan)
{

	if (value > 2230)
	{
		value = 2230;
		printf("Превышен ШИМ!\n");
	}
	else
	if (value < 0)
	{
		value = 0;
		printf("Занижен ШИМ!\n");
	}
	spi.ClrCS(g_CS_PWM);
	spi.SetCS(g_CS_PWM);
	spi.ClrCS(g_CS_PWM);

	spi.WriteByte(chan);
	spi.WriteByte(value >> 8);
	spi.WriteByte(value & 0xFF);

	spi.SetCS(g_CS_PWM);
}